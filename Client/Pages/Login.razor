@layout LoginLayout
@page "/"
@inject ICommonService  CommonService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService iLocalStorage
@inject AuthenticationStateProvider AuthStateProvider


<EditForm Model="user" OnValidSubmit="HandleLogin">
      <DataAnnotationsValidator></DataAnnotationsValidator>
     <div class="container">
    <div class="row">
      <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
        <div class="card border-0 shadow rounded-3 my-5">
          <div class="card-body p-4 p-sm-5">
            <h5 class="card-title text-center mb-5 fw-light fs-5">WMS Sign In</h5>
            <div>
              <div class="form-floating mb-3">
                  <InputText id="Username" @bind-Value="user.Username" class="form-control"></InputText>
              @*  <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com">*@
                <label for="floatingInput">User Name</label>
              </div>
              <div class="form-floating mb-3">
                   <InputText type="password" id="Password" @bind-Value="user.Password" class="form-control"></InputText>
               @* <input type="password" class="form-control" id="floatingPassword" placeholder="Password">*@
                <label for="floatingPassword">Password</label>
              </div>

             @* <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" value="" id="rememberPasswordCheck">
                <label class="form-check-label" for="rememberPasswordCheck">
                  Remember password
                </label>
              </div>*@
              <div class="d-grid">
                <button class="btn btn-primary btn-login text-uppercase fw-bold" type="submit">Sign
                  in</button>
                  
              </div>             
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</EditForm>

@code {
    private UserModel user = new UserModel();
    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();
    }
    async void HandleLogin()
    {
        Console.WriteLine("Log me in!");
        //sessionStorage.setItem('key', 'value');
        //await LocalStorage.SetItemAsync<string>("username", user.Username);
        //await AuthStateProvider.GetAuthenticationStateAsync();
        UserModel objUser = new UserModel();
        objUser = await CommonService.Login(user);
        if (objUser != null)
        {
            await iLocalStorage.SetItemAsync<UserModel?>("UserModel", objUser);  
            await iLocalStorage.SetItemAsync<string?>("username", objUser.Username);   
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/index"); 
        }
        else
        {
            
        }
        await Task.Yield();
             
    }
}